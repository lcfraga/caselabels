/**
 * Returns the address of the docker host running containerName.
 *
 */
def getHostAddress(containerName) {
    return sh(
        script: "docker-compose exec -T ${containerName} /sbin/ip route | awk '/default/ { print \$3 }'",
        returnStdout: true
    ).trim()
}

/**
 * Returns the port exposed by containerName(:containerPort).
 *
 */
def getExposedPort(containerName, containerPort) {
    return sh(
            script: "docker-compose port ${containerName} ${containerPort} | cut -d ':' -f 2",
            returnStdout: true
    ).trim()
}

pipeline {
    agent none

    options {
        buildDiscarder(logRotator(numToKeepStr:'5'))
        timeout(time: 15, unit: 'MINUTES')
    }

    environment {
        COMPOSE_PROJECT_NAME = 'caselabels-ci'
        COMPOSE_FILE         = 'docker/docker-compose.ci.yml'
    }

    stages {
        stage('Install dependencies') {
            agent {
                docker {
                    image 'node:lts-alpine'
                }
            }

            steps {
                dir('backend') {
                    sh 'npm ci'
                }
            }
        }

        stage('Run linter') {
            agent {
                docker {
                    image 'node:lts-alpine'
                }
            }

            steps {
                dir('backend') {
                    sh 'npm run lint'
                }
            }
        }

        stage('Run unit tests') {
            agent {
                docker {
                    image 'node:lts-alpine'
                }
            }

            environment {
                MOCHA_REPORTER    = 'mocha-jenkins-reporter'
                JUNIT_REPORT_PATH = 'report.xml'
                MONGO_URI         = 'mongo-uri-placeholder'
                JWT_PUBLIC_KEY    = 'jwt-public-key-placeholder'
                JWT_PRIVATE_KEY   = 'jwt-private-key-placeholder'
            }

            steps {
                dir('backend') {
                    sh "npm install ${MOCHA_REPORTER}"
                    sh 'npm test'
                }
            }

            post {
                always {
                    junit "backend/${JUNIT_REPORT_PATH}"
                }
            }
        }

        stage('Build backend docker image') {
            agent { label 'master' }

            steps {
                dir('backend') {
                    sh 'script/dockerize'
                }
            }
        }

        stage('Start mongo and backend containers') {
            agent { label 'master' }

            steps {
                sh 'docker-compose up -d'
                sleep 15
            }
        }

        stage('Run system tests') {
            agent { label 'master' }

            environment {
                HOST = getHostAddress('backend')
                PORT = getExposedPort('backend', 3000)
            }

            steps {
                dir('backend/test/system') {
                    sh './gradlew clean'
                    sh './gradlew test --info'
                }
            }

            post {
                always {
                    junit 'backend/test/system/build/test-results/test/TEST-*.xml'
                }
            }
        }
    }

    post {
        always {
            node('master') {
                sh 'docker-compose down --volumes'
                sh 'docker system prune --volumes -f'
            }
        }
    }
}
